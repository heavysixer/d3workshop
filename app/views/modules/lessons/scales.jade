div(id="description")
  h3.md-headline Scales
  p.md-body-1 In mathematics, scales are algorithms used to correlate the size of an object relative to the actual model. For example, a toy car which is 1:8 scale is eight times smaller than the actual car. Scales function much the same way in D3 as they do in mathematics. Scales in D3 are used to convert an input domain to an output range. We learned about domains and ranges in the previous lesson. Remember, the input domain relates to the incoming data, and the output range is used to calculate the space available to draw the visualization in. 
  p.md-body-1 
    | D3 has many types of scales. But generally, all scales are considered either quantitative, ordinal or time-based. In this lesson, we’ll get a gentle introduction to the three scale groups by exploring one scale type from each scale group. According to D3’s documentation the three scale groups can be understood in the following way:
    ul
      li.md-body-1 
        strong Quantitative Scales 
        | - for continuous input domains, such as numbers.
      li.md-body-1 
        strong Ordinal Scales 
        | - for discrete input domains, such as names or categories.
      li.md-body-1 
        strong Time Scales 
        | - for time domains.

  h5.md-title Exercises
    ol
      li.md-body-1 Using the data provided, create a chart that uses time and linear scales together.
      li.md-body-1 Using the data provided, create a chart that uses linear and ordinal scales together.
      li.md-body-1 Can you think of a chart that could use all three types of scales together?

  h5.md-title Takeaways
    p.md-body-1 Scales are used to model the incoming data in such a way that it can be accurately mapped within the constraints of the available visible space of the browser. Scales create colorations between the data and the output based on an underlying algorithm that defines the scale. Therefore, picking the scale appropriate for the data is essential. 
  
style(id="css").
  body {
    font: 10px sans-serif;
  }
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .dot {
    stroke: #000;
  }

script(id='data').
  var linearData = [1,1,2,2,5,4];

script(id='javascript').
  var margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 40
  },
    width = $('body').width() - margin.left - margin.right,
    height = $('body').width() - margin.top - margin.bottom;

  var x = d3.scale.linear()
    .range([0, width]);

  var y = d3.scale.linear()
    .range([height, 0]);

  var color = d3.scale.category10();

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

  var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

  var svg = d3.select("#svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.tsv("/data/flora.tsv", function(error, data) {
    if (error) throw error;

    data.forEach(function(d) {
        d.sepalLength = +d.sepalLength;
        d.sepalWidth = +d.sepalWidth;
    });

    x.domain(d3.extent(data, function(d) {
        return d.sepalWidth;
    })).nice();
    y.domain(d3.extent(data, function(d) {
        return d.sepalLength;
    })).nice();

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .append("text")
        .attr("class", "label")
        .attr("x", width)
        .attr("y", -6)
        .style("text-anchor", "end")
        .text("Sepal Width (cm)");

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("class", "label")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Sepal Length (cm)")

    svg.selectAll(".dot")
        .data(data)
        .enter().append("circle")
        .attr("class", "dot")
        .attr("r", 3.5)
        .attr("cx", function(d) {
            return x(d.sepalWidth);
        })
        .attr("cy", function(d) {
            return y(d.sepalLength);
        })
        .style("fill", function(d) {
            return color(d.species);
        });

    var legend = svg.selectAll(".legend")
        .data(color.domain())
        .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d, i) {
            return "translate(0," + i * 20 + ")";
        });

    legend.append("rect")
        .attr("x", width - 18)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", color);

    legend.append("text")
        .attr("x", width - 24)
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .text(function(d) {
            return d;
        });
  });

div(id="html")
  svg#svg
