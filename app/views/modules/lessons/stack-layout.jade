div(id="description")
  h3.md-headline Stack Layouts
  p.md-body-1 The stacked layout is useful when data is best understood by summing a series of data elements grouped along an axis. A typical example of where this layout is often used is the stacked column chart. This chart is often useful in conjunction with a grouped column chart because they can use the same data series, and where the stacked column highlights the sum of the data series across an axis the grouped column can be used to show the relative distribution. The following example demonstrates the streamgraph which is a less-common use of the stacked layout. 
  
  h5.md-title Exercises
  ol
    li.md-body-1 Using the provided data use the stack layout to sum along a dimension (either x or y). 
    li.md-body-1 What is the total for each dimension?
  
style(id="css").
  

script(id='data').
  // No data for this example.
  var data = [
    [
            { x: 0, y: 50 },
            { x: 1, y: 12 },
            { x: 2, y: 22 },
            { x: 3, y: 70 },
            { x: 4, y: 3 }
    ],
    [
            { x: 0, y: 11 },
            { x: 1, y: 22 },
            { x: 2, y: 39 },
            { x: 3, y: 53 },
            { x: 4, y: 27 }
    ],
    [
            { x: 0, y: 52 },
            { x: 1, y: 18 },
            { x: 2, y: 23 },
            { x: 3, y: 65 },
            { x: 4, y: 21 }
    ]
    ];


script(id='javascript').
  // Based on Mike Bostock's streamgraph example http://bl.ocks.org/mbostock/4060954
  var n = 20, // number of layers
      m = 200, // number of samples per layer
      stack = d3.layout.stack().offset("wiggle"),
      layers0 = stack(d3.range(n).map(function() {
          return bumpLayer(m);
      })),
      layers1 = stack(d3.range(n).map(function() {
          return bumpLayer(m);
      }));
  var width = $('#svg').parent().width(),
      height = Math.min($('#svg').parent().height(), $('#svg').parent().height());

  var x = d3.scale.linear()
      .domain([0, m - 1])
      .range([0, width]);

  var y = d3.scale.linear()
      .domain([0, d3.max(layers0.concat(layers1), function(layer) {
          return d3.max(layer, function(d) {
              return d.y0 + d.y;
          });
      })])
      .range([height, 0]);

  var color = d3.scale.linear()
      .range(["#EB77B0", "#FDC623"]);

  var area = d3.svg.area()
      .x(function(d) {
          return x(d.x);
      })
      .y0(function(d) {
          return y(d.y0);
      })
      .y1(function(d) {
          return y(d.y0 + d.y);
      });

  var svg = d3.select("#svg")
      .attr("width", width)
      .attr("height", height);

  svg.selectAll("path")
      .data(layers0)
      .enter().append("path")
      .attr("d", area)
      .style("fill", function() {
          return color(Math.random());
      });

  function transition() {
      d3.selectAll("path")
          .data(function() {
              var d = layers1;
              layers1 = layers0;
              return layers0 = d;
          })
          .transition()
          .duration(2500)
          .attr("d", area);
  }

   // Inspired by Lee Byron's test data generator.

  function bumpLayer(n) {

      function bump(a) {
          var x = 1 / (.1 + Math.random()),
              y = 2 * Math.random() - .5,
              z = 10 / (.1 + Math.random());
          for (var i = 0; i < n; i++) {
              var w = (i / n - y) * z;
              a[i] += x * Math.exp(-w * w);
          }
      }

      var a = [],
          i;
      for (i = 0; i < n; ++i) a[i] = 0;
      for (i = 0; i < 5; ++i) bump(a);
      return a.map(function(d, i) {
          return {
              x: i,
              y: Math.max(0, d)
          };
      });
  }


div(id="html")
  svg#svg
