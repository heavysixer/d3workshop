div(id="description")
  h3.md-headline Transitions
  p.md-body-1 Some charts are meant to be understood as a static image. Other charts are dynamic, and update periodically. D3’s transition API allows developers to control how and when charts update to ensure these changes are not visually jarring, and more importantly, that the viewer’s contextual understanding of the data is not lost as the transition occurs. Transitions are selections which apply their changes incrementally instead of all at once. D3’s transition API has a robust collection of functions which can help tune the transition to be meaningful and impactful to the visualization. This lesson deals with just a subset of the total number of features.
  
  h5.md-title Exercises
  ol
    li.md-body-1 Try and make the bars transition at different speeds.
  
  h5.md-title Takeaways
  p.md-body-1 
    | Transitions are not always needed, but when they are, it is important to use them in a way that enhances the understanding of the visualization and not just as visual decoration. The full documentation of transitions can be found here: 
    a(href="https://github.com/mbostock/d3/wiki/Transitions" target="_new") https://github.com/mbostock/d3/wiki/Transitions
  
style(id="css").
  #chart div {
    font: 10px sans-serif;
    background-color: steelblue;
    text-align: right;
    padding: 3px;
    margin: 1px;
    color: white;
  }

script(id='data').
  function random(n) {
    var val = []
    for(i = 0; i < n; i++) {
      val.push(Math.random() * 100)
    }
    return val;
  }
  var data = random(10);


script(id='javascript').

  // Based on enjalot's example http://bl.ocks.org/enjalot/1429426
  var w = $('body').width();
  var h = $('body').width();

  function bars(data) {
      max = d3.max(data)

      //nice breakdown of d3 scales
      //http://www.jeromecukier.net/blog/2011/08/11/d3-scales-and-color/
      x = d3.scale.linear()
          .domain([0, max])
          .range([0, w]);

      y = d3.scale.ordinal()
          .domain(d3.range(data.length))
          .rangeBands([0, h], .2);


      var vis = d3.select("#svg");
      var bars = vis.selectAll("rect.bar")
          .data(data);

      //update
      bars
          .attr("fill", "#0a0")
          .attr("stroke", "#050");

      //enter
      bars.enter()
          .append("svg:rect")
          .attr("class", "bar")
          .attr("fill", "steelblue");

      //exit 
      bars.exit()
          .transition()
          .duration(300)
          .ease("exp")
          .attr("width", 0)
          .remove();


      bars
          .attr("stroke-width", 4)
          .transition()
          .duration(300)
          .ease("quad")
          .attr("width", x)
          .attr("height", y.rangeBand())
          .attr("transform", function(d, i) {
              return "translate(" + [0, y(i)] + ")"
          })

  }

  function init() {
      //setup the svg
      var svg = d3.select("#svg")
          .attr("width", w + 100)
          .attr("height", h + 100);

      svg.append("svg:rect")
          .attr("width", "100%")
          .attr("height", "100%")
          .attr("fill", "none");

      svg.append("svg:g")
          .attr("id", "chart")
          .attr("transform", "translate(50,50)");

      svg.on("click", function(d, i) {
          bars(random(10))
      });

      bars(data);
  }
  init();



div(id="html")
  svg#svg
