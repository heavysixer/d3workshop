div(id="description")
  h3.md-headline Chart Axes
  p.md-body-1 We’ve learned plenty about how data is linked to the DOM by D3, and how that linked data is used to place the DOM elements on the screen. However, we’ve reached the limit of what we can do with simple HTML elements. Many of the features of D3 are specifically designed for environments better suited for drawing, like SVG. 
  p.md-body-1 In this lesson, we’ll be creating axes for our chart. The chart axis is used to display dimensions of the data visually. D3 represents these dimensions differently depending on the scale that is being used. In our lesson, we can see a time series running along the x axis (horizontally) and a linear sequence along the y axis (vertically). 
  
  h3.md-title Exercises
  ol
    li.md-body-1 Place the y axis on the left of the chart instead of the right.
    li.md-body-1 Change the timeseries tick values into a different format.
      
  h3.md-title Takeaways
  p.md-body-1 While D3 is not a charting library, there are plenty of components within D3 that are specifically designed for charting. The D3 axis component is one of those items.

style(id="css").
  body {
    font: 10px sans-serif;
    margin: 0;
  }

  path.line {
    fill: none;
    stroke: #666;
    stroke-width: 1.5px;
  }

  path.area {
    fill: #e7e7e7;
  }

  .axis {
    shape-rendering: crispEdges;
  }

  .x.axis line {
    stroke: #fff;
  }

  .x.axis .minor {
    stroke-opacity: .5;
  }

  .x.axis path {
    display: none;
  }

  .y.axis line, .y.axis path {
    fill: none;
    stroke: #000;
  }


script(id='data').

script(id='javascript').

  // Based on: http://bl.ocks.org/mbostock/1166403
  var margin = {top: 80, right: 80, bottom: 80, left: 10},
      width = $('body').width() - margin.left - margin.right,
      height = $('body').width() - margin.top - margin.bottom;

  var parse = d3.time.format("%b %Y").parse;

  // Scales and axes. Note the inverted domain for the y-scale: bigger is up!
  var x = d3.time.scale().range([0, width]),
      y = d3.scale.linear().range([height, 0]),
      xAxis = d3.svg.axis().scale(x).tickSize(-height).tickSubdivide(true),
      yAxis = d3.svg.axis().scale(y).ticks(4).orient("right");

  // An area generator, for the light fill.
  var area = d3.svg.area()
      .interpolate("monotone")
      .x(function(d) { return x(d.date); })
      .y0(height)
      .y1(function(d) { return y(d.price); });

  // A line generator, for the dark stroke.
  var line = d3.svg.line()
      .interpolate("monotone")
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.price); });

  d3.csv("/data/stocks.csv", type, function(error, data) {

    // Filter to one symbol; the S&P 500.
    var values = data.filter(function(d) {
      return d.symbol == "S&P 500";
    });

    // Compute the minimum and maximum date, and the maximum price.
    x.domain([values[0].date, values[values.length - 1].date]);
    y.domain([0, d3.max(values, function(d) { return d.price; })]).nice();

    // Add an SVG element with the desired dimensions and margin.
    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .on("click", click);

    // Add the clip path.
    svg.append("clipPath")
        .attr("id", "clip")
      .append("rect")
        .attr("width", width)
        .attr("height", height);

    // Add the area path.
    svg.append("path")
        .attr("class", "area")
        .attr("clip-path", "url(#clip)")
        .attr("d", area(values));

    // Add the x-axis.
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    // Add the y-axis.
    svg.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate(" + width + ",0)")
        .call(yAxis);

    // Add the line path.
    svg.append("path")
        .attr("class", "line")
        .attr("clip-path", "url(#clip)")
        .attr("d", line(values));

    // Add a small label for the symbol name.
    svg.append("text")
        .attr("x", width - 6)
        .attr("y", height - 6)
        .style("text-anchor", "end")
        .text(values[0].symbol);

    // On click, update the x-axis.
    function click() {
      var n = values.length - 1,
          i = Math.floor(Math.random() * n / 2),
          j = i + Math.floor(Math.random() * n / 2) + 1;
      x.domain([values[i].date, values[j].date]);
      var t = svg.transition().duration(750);
      t.select(".x.axis").call(xAxis);
      t.select(".area").attr("d", area(values));
      t.select(".line").attr("d", line(values));
    }
  });

  // Parse dates and numbers. We assume values are sorted by date.
  function type(d) {
    d.date = parse(d.date);
    d.price = +d.price;
    return d;
  }

div(id="html")
