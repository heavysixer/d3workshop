div(id="description")
  h3.md-headline D4 After Render
  p.md-body-1 
    | All features have an afterRender() function which as the name suggests will be called only after the feature has rendered. This function is useful if you need to modify aspects of the feature's output which are not easily completed using the feature's native accessors. The function passes the following variables in as arguments:
    ul
      li
        strong feature 
        | - the feature object itself
      li
        strong parsedData 
        | - The data used by the feature during the render process
      li
        strong chartArea
        | - The d3 selection containing the chart area where all features are rendered
      li
        strong selection
        | - The selection generated by the feature itself
 
   p.md-body-1 This example will apply a hatch pattern to the first two rows of the column chart. Something the bar feature does not normally support.
  
  h3.md-title Exercises
    ol
      li.md-body-1 
        | Make your own custom 
        code.code afterRender()
        | for another feature in the chart.


style(id="css").
  .hatch {
      stroke: #fff !important;
      pointer-events: none;
  }
  
  .d4 .negative.fill {
    fill: #CD202C;
  }

  .d4 .positive.fill {
    fill: #002960;
  }

script(id='data').
  var data = [];

  for (var i = 0; i < 25; i++) {
    data.push({
      x: i,
      y: i
    });
  }

script(id='javascript').
  'use strict';
  var chart = d4.charts.column();
  chart
    .outerWidth($('#example').width())
    .using('bars', function(bar) {
      bar
        .afterRender(function(feature, parsedData, chartArea, selection) {

          // Hatch pattern based off this example:
          // http://stackoverflow.com/questions/13069446/simple-fill-pattern-in-svg-diagonal-hatching
          var defs = this.container.select('defs');
          d4.appendOnce(defs, 'pattern')
            .attr('id', 'diagonalHatch')
            .attr('patternUnits', 'userSpaceOnUse')
            .attr('width', 4)
            .attr('height', 4)
            .append('path')
            .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')
            .attr('class', 'hatch');

          // Get the position of the last two rects and create a new ones
          // with the diagonal hatch to overlay ontop.
          var stripedBar = selection.slice(selection.length - 2, selection.length);
          d4.each(stripedBar, function(b) {
            chartArea.append('rect')
              .attr('x', b[0].attributes.x.value)
              .attr('y', b[0].attributes.y.value)
              .attr('class', 'noClick')
              .attr('width', b[0].attributes.width.value)
              .attr('height', b[0].attributes.height.value)
              .attr('fill', 'url(#diagonalHatch)');
          }.bind(this));
        });
    });

  d3.select('#example')
  .datum(data)
  .call(chart);


div(id="html")
  #example
